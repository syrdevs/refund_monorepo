{"version":3,"sources":["../../../../src/pages/Main/MainView.js"],"names":["formatMessage","value","id","FormItem","Form","Item","confirm","Modal","RangePicker","DatePicker","hasRole","roles","userRoles","some","r","indexOf","MainView","props","dispatch","type","payload","state","pagingConfig","current","pageSize","max","min","start","length","setState","ShowModal","undefined","ShowGraph","selectedRowKeys","console","log","sortedInfo","loadMainGridData","filters","name","label","withMax","hint","title","dataIndex","key","isVisible","width","statusCode","statusText","content","statusId","code","then","marginTop","height","references","map","item","nameRu","okText","cancelText","onOk","valueId","onCancel","toLowerCase","nullableDateRecords","selectKey","universal","table","find","filter","itemRecord","applicationId","receiptAppdateToFsms","btnhide","select","dappRefundStatusId","isRole","args","eq","recordId","authToken","localStorage","getItem","columns","JSON","parse","fetch","headers","Authorization","method","body","stringify","src","data","concat","column","response","ok","blob","disposition","get","fileName","getFileNameByContentDisposition","raw","saveAs","format","contentDisposition","regex","matches","exec","filename","filenames","replace","match","decodeURI","prevState","ImportXMLModal","visible","ModalChangeDateRefund","modalVisible","updateModalVisible","expandForm","selectedRows","searchButton","formValues","stepFormValues","fcolumn","order","className","onCell","record","onClick","toggleItems","loadRpmuData","render","personSurname","personFirstname","personPatronname","color","setColor","isRefundConfirm","setBadgeStatus","isHidden","searchercont","tablecont","xsize","rpmu","universal2","entity","dateFormat","rpmuColumns","rpmuColumn","GridFilterData","stateFilter","padding","margin","borderRadius","event","hideleft","rpmuLoading","x","text","lastname","firstname","secondname","iin","birthdate","Object","keys","sort","field","refundExist","total","totalElements","page","loadingData","setStatusRecord","btnIsDisabled","disableBtnIsReceiptDateNull","AppRefundStatusAuto","showModal","showGraphic","refundsReceiver","exportToExcel","pageNumber","onShowSizeChange","cellIndex","cell","toggleSearcher","checkStatus","Component","loading","effects"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  Table,\r\n  Icon,\r\n  Menu,\r\n  Dropdown,\r\n  Button,\r\n  Label,\r\n  Pagination,\r\n  Row,\r\n  Col,\r\n  Upload,\r\n  Form,\r\n  Modal,\r\n  Input,\r\n  DatePicker,\r\n  LocaleProvider,\r\n  Select,\r\n  Checkbox,\r\n  Divider,\r\n  Spin,\r\n  Badge\r\n} from \"antd\";\r\nimport moment from \"moment\";\r\nimport SmartGridView from \"../../components/SmartGridView\";\r\nimport connect from \"../../Redux\";\r\n\r\nfunction formatMessage(value) {\r\n  return value.id;\r\n}\r\n\r\nconst FormItem = Form.Item;\r\nconst confirm = Modal.confirm;\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction hasRole(roles) {\r\n  let userRoles = [\"ADMIN\"];\r\n  return !userRoles.some(r => roles.indexOf(r) >= 0);\r\n}\r\n\r\n\r\nclass MainView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n      ImportXMLModal: {\r\n        visible: false\r\n      },\r\n      sortedInfo: {},\r\n\r\n      ModalChangeDateRefund: false,\r\n\r\n      ShowModal: false,\r\n      btnhide: false,\r\n      ShowGraph: false,\r\n      modalVisible: false,\r\n      updateModalVisible: false,\r\n      expandForm: false,\r\n      selectedRows: [],\r\n      searchButton: false,\r\n      formValues: {},\r\n      stepFormValues: {},\r\n      fcolumn: [\r\n        {\r\n          title: formatMessage({ id: \"menu.mainview.paylists\" }),\r\n          order: 0,\r\n          key: \"operation\",\r\n          className: \"action_column\",\r\n          isVisible: true,\r\n          onCell: record => {\r\n            return {\r\n              onClick: () => {\r\n                this.toggleItems(record);\r\n                this.loadRpmuData(record.id);\r\n              }\r\n            };\r\n          },\r\n          render: () => (\r\n            <Button size={\"small\"}>\r\n              <Icon type=\"database\" theme=\"outlined\"/>\r\n            </Button>\r\n          )\r\n        },\r\n        /*{\r\n          title: formatMessage({ id: 'menu.mainview.mt102' }),\r\n          order: 1,\r\n          key: 'mt102',\r\n          className: 'action_column',\r\n          // to do hide for don't admin\r\n          isVisible: !hasRole(['ADMIN']),\r\n          onCell: record => {\r\n            return {\r\n              onClick: () => {\r\n                /!*const { dispatch } = this.props;\r\n                dispatch({\r\n                  type: 'universal2/getmt102',\r\n                  payload: {},\r\n                });*!/\r\n                //this.toggleItems(record);\r\n              },\r\n            };\r\n          },\r\n          render: () => (\r\n            <Button size={'small'}>\r\n              <a href=\"/api/refund/getfile\" download>\r\n                <Icon><FontAwesomeIcon icon={faFileAlt}/></Icon>\r\n              </a>\r\n            </Button>\r\n          ),\r\n        },*/\r\n        {\r\n          title: formatMessage({ id: \"menu.mainview.fio\" }),\r\n          order: 3,\r\n          key: \"fio\",\r\n          isVisible: true,\r\n          width: 150,\r\n          render: (item) => {\r\n            return item.personSurname + \" \" + item.personFirstname + \" \" + item.personPatronname;\r\n          }\r\n        }, {\r\n          \"title\": \"Статус заявки на возврат\",\r\n          isVisible: true,\r\n          \"dataIndex\": \"dappRefundStatusId.nameRu \",\r\n          order: 7,\r\n          render: (record, value) => <a\r\n            style={{ color: this.setColor(value.isRefundConfirm) }}//value.isRefundConfirm ? 'green' : 'red' }}\r\n            href=\"#\"> <span><Badge\r\n            status={this.setBadgeStatus(value.isRefundConfirm)}/></span> {value.dappRefundStatusId ? value.dappRefundStatusId.nameRu : null}\r\n          </a>\r\n        }],\r\n      columns: [\r\n        {\r\n          \"title\": \"Номер заявки\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"applicationId.appNumber\"\r\n        }, {\r\n          \"title\": \"Дата заявления плательщика\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"appPayerDate\"\r\n        }, {\r\n          \"title\": \"Дата заявки\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"applicationId.appDate\"\r\n        }, {\r\n          \"title\": \"Дата поступления заявления в Фонд\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"receiptAppdateToFsms\"\r\n        }, {\r\n          \"title\": \"Дата поступление заявки на возврат\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"entryDate\"\r\n        }, {\r\n          \"title\": \"Дата исполнения заявки\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"appEndDate\"\r\n        },\r\n        {\r\n          \"title\": \"Сумма возврата\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"refundPayAmount\"\r\n\r\n        },\r\n        {\r\n          \"title\": \"Референс ГК\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"gcvpReference\"\r\n        }, {\r\n          \"title\": \"Номер плат-го поручения ГК\",\r\n          \"isVisible\": true,\r\n          \"dataIndex\": \"gcvpOrderNum\"\r\n        }, { \"title\": \"Дата плат-го поручения ГК\", \"dataIndex\": \"gcvpOrderDate\" }, {\r\n          \"title\": \"Причина возврата\",\r\n          \"dataIndex\": \"drefundReasonId.nameRu\"\r\n        }, { \"title\": \"ИИН Потребителя\", \"dataIndex\": \"personIin\" }, {\r\n          \"title\": \"КНП\",\r\n          \"dataIndex\": \"applicationId.dknpId.code\"\r\n        }, {\r\n          \"title\": \"Номер платежного поручения\",\r\n          \"dataIndex\": \"applicationId.payOrderNum\"\r\n        }, {\r\n          \"title\": \"Дата платежного поручения\",\r\n          \"dataIndex\": \"applicationId.payOrderDate\"\r\n        }, { \"title\": \"Сумма отчислений\", \"dataIndex\": \"payAmount\" }, {\r\n          \"title\": \"Дата последнего взноса\",\r\n          \"dataIndex\": \"lastPayDate\"\r\n        }, {\r\n          \"title\": \"Дата осуществления возврата\",\r\n          \"dataIndex\": \"refundDate\"\r\n        }, {\r\n          \"title\": \"Кол-во отчислений и (или) взносов за последние 12 календарных месяцев\",\r\n          \"dataIndex\": \"lastMedcarePayCount\"\r\n        }, { \"title\": \"Статус страхования\", \"dataIndex\": \"medinsStatus\" }, {\r\n          \"title\": \"Референс\",\r\n          \"dataIndex\": \"applicationId.reference\"\r\n        }, { \"title\": \"Причина отказа\", \"dataIndex\": \"ddenyReasonId.nameRu\" }, {\r\n          \"title\": \"Отчет об отказе\",\r\n          \"dataIndex\": \"refundStatus\"\r\n        }, { \"title\": \"Осталось дней\", \"dataIndex\": \"daysLeft\" }, {\r\n          \"title\": \"Дата изменения статуса заявки\",\r\n          \"dataIndex\": \"changeDate\"\r\n        }, { \"title\": \"Период\", \"dataIndex\": \"payPeriod\" }, {\r\n          \"title\": \"Веб-сервис (сообщение) \",\r\n          \"dataIndex\": \"wsStatusMessage\"\r\n        }],\r\n      isHidden: true,\r\n      searchercont: 0,\r\n      selectedRowKeys: [],\r\n      tablecont: 24,\r\n      xsize: \"auto\",\r\n      rpmu: {\r\n        sortedInfo: {},\r\n        pagingConfig: {\r\n          \"start\": 0,\r\n          \"length\": 15,\r\n          \"sort\": [],\r\n          \"src\": {\r\n            \"searched\": false,\r\n            \"data\": {}\r\n          }\r\n        }\r\n      },\r\n      pagingConfig: {\r\n        \"entity\": \"Refund\",\r\n        \"start\": 0,\r\n        \"length\": 15,\r\n        \"sort\": [],\r\n        \"filter\": {}\r\n      }\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { dispatch } = this.props;\r\n    dispatch({\r\n      type: \"universal2/clear\",\r\n      payload: {\r\n        table: \"requests\"\r\n      }\r\n    });\r\n  }\r\n\r\n  loadMainGridData = () => {\r\n\r\n    const { dispatch } = this.props;\r\n    //type: 'universal/mainviewtable',\r\n    dispatch({\r\n      type: \"universal2/getList\",\r\n      payload: this.state.pagingConfig\r\n    });\r\n    /*.then(() => {\r\n    if (this.props.universal.table.totalElements===undefined)\r\n    {\r\n      this.setState({\r\n        pagingConfig: {\r\n          'start': 0,\r\n          'length': 15,\r\n          'src': {\r\n            'searched': false,\r\n            'data': {},\r\n          },\r\n        },\r\n      }, () => {\r\n        this.loadMainGridData();\r\n      });\r\n    }\r\n  });*/\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadMainGridData();\r\n\r\n    const { dispatch } = this.props;\r\n\r\n    /*dispatch({\r\n      type: 'universal/mainviewtable',\r\n      payload: this.state.pagingConfig,\r\n    });*/\r\n    /*dispatch({\r\n      type: 'universal/mainviewcolumn',\r\n      payload: {},\r\n    });*/\r\n    /*.then(()=> {\r\n    console.log(this.props);\r\n    this.props.universal.columns.concat(this.state.columns);\r\n  });*/\r\n    /*  dispatch({\r\n        type: 'universal/rpmuTable',\r\n        payload: {},\r\n      });*/\r\n  }\r\n\r\n  onShowSizeChange = (current, pageSize) => {\r\n    const max = current * pageSize;\r\n    const min = max - pageSize;\r\n    const { dispatch } = this.props;\r\n    dispatch({\r\n      type: \"universal2/getList\",\r\n      payload: {\r\n        ...this.state.pagingConfig,\r\n        start: current,\r\n        length: pageSize\r\n      }\r\n    });\r\n  };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      ShowModal: true\r\n    });\r\n  };\r\n\r\n  setColor = (value) => {\r\n    return \"#000000a6\";\r\n  };\r\n\r\n  setBadgeStatus = (value) => {\r\n    if (value) {\r\n      return \"success\";\r\n    }\r\n    else if (value === undefined) {\r\n      return \"default\";\r\n    }\r\n    else {\r\n      return \"error\";\r\n    }\r\n  };\r\n\r\n  showGraphic = () => {\r\n    this.setState({\r\n      ShowGraph: true\r\n    });\r\n  };\r\n\r\n  toggleSearcher() {\r\n    this.setState({\r\n      searchButton: true,\r\n      isHidden: false,\r\n      searchercont: 7,\r\n      tablecont: 17\r\n    });\r\n  }\r\n\r\n  toggleItems() {\r\n    this.setState({\r\n      searchButton: false,\r\n      isHidden: false,\r\n      searchercont: 8,\r\n      tablecont: 16\r\n    });\r\n  }\r\n\r\n  hideleft() {\r\n    if (!this.state.isHidden) {\r\n      this.setState({\r\n        isHidden: true,\r\n        searchButton: false,\r\n        searchercont: 0,\r\n        tablecont: 24\r\n      });\r\n    }\r\n  }\r\n\r\n  selectTable = (selectedRowKeys) => {\r\n    console.log(\"test\");\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  clearFilter = () => {\r\n\r\n    this.setState({\r\n      sortedInfo: {},\r\n      pagingConfig: {\r\n        \"start\": 0,\r\n        \"entity\": \"Refund\",\r\n        \"length\": 15,\r\n        \"sort\": [],\r\n        \"filter\": {}\r\n      }\r\n    }, () => {\r\n      this.loadMainGridData();\r\n    });\r\n  };\r\n\r\n  setFilter = (filters) => {\r\n\r\n    this.setState({\r\n      sortedInfo: {},\r\n      pagingConfig: {\r\n        \"start\": 0,\r\n        \"entity\": \"Refund\",\r\n        \"length\": 15,\r\n        \"sort\": [],\r\n        \"filter\": {\r\n          ...filters\r\n        }\r\n      }\r\n    }, () => {\r\n      this.loadMainGridData();\r\n    });\r\n\r\n\r\n  };\r\n\r\n  stateFilter = () => {\r\n\r\n    /*   {\r\n         name: 'test',\r\n         label: 'selectlist',\r\n         type: 'selectlist',\r\n       },*/\r\n    return [\r\n      {\r\n        name: \"applicationId.appNumber\",\r\n        label: formatMessage({ id: \"menu.filter.numberrequest\" }),\r\n        type: \"text\"\r\n      },\r\n      {\r\n        name: \"personIin\",\r\n        label: formatMessage({ id: \"menu.filter.iin\" }),\r\n        type: \"text\",\r\n        withMax: 12\r\n      },\r\n      {\r\n        name: \"dappRefundStatus\",\r\n        label: formatMessage({ id: \"menu.filter.refundstatus\" }),\r\n        type: \"multibox\"\r\n      },\r\n      {\r\n        name: \"appEndDate\",\r\n        label: formatMessage({ id: \"menu.filter.lastdate\" }),\r\n        type: \"listbetweenDate\"\r\n      },\r\n      {\r\n        name: \"appPayerDate\",\r\n        label: formatMessage({ id: \"menu.filter.payerdate\" }),\r\n        type: \"listbetweenDate\"\r\n      },\r\n      {\r\n        name: \"refundEntryDate\",\r\n        label: formatMessage({ id: \"menu.filter.RefundComeDate\" }),\r\n        type: \"listbetweenDate\"\r\n      },\r\n      {\r\n        name: \"refundEntryDate\",\r\n        label: formatMessage({ id: \"menu.filter.RefundFundDate\" }),\r\n        type: \"listbetweenDate\"\r\n      },\r\n      {\r\n        name: \"refundDate\",\r\n        label: formatMessage({ id: \"menu.filter.RefusalDate\" }),\r\n        type: \"listbetweenDate\"\r\n      },\r\n      {\r\n        name: \"knp\",\r\n        label: formatMessage({ id: \"menu.filter.knp\" }),\r\n        type: \"multibox\",\r\n        hint: true\r\n      },\r\n      {\r\n        name: \"drefundReason\",\r\n        label: formatMessage({ id: \"menu.filter.RefundReason\" }),\r\n        type: \"combobox\"\r\n      },\r\n      {\r\n        name: \"ddenyReason\",\r\n        label: formatMessage({ id: \"menu.filter.RefusalReason\" }),\r\n        type: \"combobox\"\r\n      }\r\n    ];\r\n  };\r\n\r\n  rpmuColumn = () => {\r\n    return [\r\n      {\r\n        title: formatMessage({ id: \"menu.mainview.paymentsum\" }),\r\n        dataIndex: \"paymentsum\",\r\n        key: \"paymentsum\",\r\n        isVisible: true,\r\n        width: 80\r\n      },\r\n      {\r\n        title: formatMessage({ id: \"menu.mainview.paymentperiod\" }),\r\n        dataIndex: \"paymentperiod\",\r\n        isVisible: true,\r\n        key: \"paymentperiod\",\r\n        width: 70\r\n      },\r\n      {\r\n        title: formatMessage({ id: \"menu.mainview.knp\" }),\r\n        dataIndex: \"knp\",\r\n        key: \"knp\",\r\n        isVisible: true,\r\n        width: 50\r\n      },\r\n      {\r\n        title: formatMessage({ id: \"menu.mainview.reference\" }),\r\n        dataIndex: \"reference\",\r\n        key: \"reference\",\r\n        isVisible: true,\r\n        width: 70\r\n      }\r\n    ];\r\n  };\r\n  setStatusRecord = (statusCode, statusText) => {\r\n    const { selectedRowKeys } = this.state;\r\n    const { dispatch } = this.props;\r\n\r\n    let content;\r\n    let statusId = false;\r\n\r\n    if (selectedRowKeys.length === 0) return false;\r\n\r\n    if (statusCode === 2) {\r\n\r\n      // to do status component\r\n\r\n      dispatch({\r\n        type: \"references/load\",\r\n        code: \"ddenyReason\"\r\n      }).then(() => {\r\n        content = (<div style={{ marginTop: 10 }}><span>{formatMessage({ id: \"menu.filter.RefusalReason\" })}:</span>\r\n          <Select\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"\"\r\n            onChange={(value) => {\r\n              statusId = value;\r\n            }}\r\n          >\r\n            <Select.Option key={null}>{<div style={{ height: 20 }}></div>}</Select.Option>\r\n            {this.props.references[\"ddenyReason\"] && this.props.references[\"ddenyReason\"].map((item) => {\r\n              return <Select.Option key={item.id}>{item.nameRu}</Select.Option>;\r\n            })}\r\n          </Select></div>);\r\n\r\n        confirm({\r\n          title: \"Подтверждение\",\r\n          content: content,\r\n          okText: \"Да\",\r\n          cancelText: \"Нет\",\r\n          onOk: () => {\r\n            dispatch({\r\n              type: \"universal/changeRefundStatus\",\r\n              payload: {\r\n                \"status\": statusCode,\r\n                \"denyReasonId\": statusId ? { id: statusId } : null,\r\n                \"refundList\": selectedRowKeys.map((valueId) => ({ id: valueId }))\r\n              }\r\n            }).then(() => {\r\n              this.setState({\r\n                selectedRowKeys: []\r\n              }, () => {\r\n                this.loadMainGridData();\r\n              });\r\n            });\r\n          },\r\n          onCancel: () => {\r\n            this.setState({\r\n              selectedRowKeys: []\r\n            });\r\n          }\r\n        });\r\n\r\n      });\r\n\r\n    } else {\r\n      content = \"Вы действительно хотите \" + statusText.toLowerCase() + \" возврат? \";\r\n      confirm({\r\n        title: \"Подтверждение\",\r\n        content: content,\r\n        okText: \"Да\",\r\n        cancelText: \"Нет\",\r\n        onOk: () => {\r\n          dispatch({\r\n            type: \"universal/changeRefundStatus\",\r\n            payload: {\r\n              \"status\": statusCode,\r\n              \"denyReasonId\": null,\r\n              \"refundList\": selectedRowKeys.map((valueId) => ({ id: valueId }))\r\n            }\r\n          }).then(() => {\r\n            this.setState({\r\n              selectedRowKeys: []\r\n            }, () => {\r\n              this.loadMainGridData();\r\n            });\r\n          });\r\n        },\r\n        onCancel: () => {\r\n          this.setState({\r\n            selectedRowKeys: []\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n  AppRefundStatusAuto = () => {\r\n    const { dispatch } = this.props;\r\n    if (this.state.selectedRowKeys.length > 0) {\r\n\r\n      dispatch({\r\n        type: \"universal/AppRefundStatusAuto\",\r\n        payload: {\r\n          \"refundList\": this.state.selectedRowKeys.map((valueId) => ({ id: valueId }))\r\n        }\r\n      }).then(() => {\r\n        this.loadMainGridData();\r\n      });\r\n    }\r\n  };\r\n  disableBtnIsReceiptDateNull = () => {\r\n\r\n\r\n    if (this.state.selectedRowKeys.length > 0) {\r\n      let nullableDateRecords = this.state.selectedRowKeys\r\n        .map((selectKey) => this.props.universal.table.content.find(item => item.id === selectKey))\r\n        .filter((itemRecord) => itemRecord.applicationId.receiptAppdateToFsms === null);\r\n\r\n      return nullableDateRecords.length > 0;\r\n    }\r\n    return false;\r\n  };\r\n  checkStatus = (selectedRowKeys) => {\r\n    this.setState({\r\n      btnhide: false\r\n    });\r\n    if (selectedRowKeys.length > 0) {\r\n      selectedRowKeys.map(select => {\r\n\r\n        if ([this.props.universal.table.content.find(item => item.id === select)].map(item => item.dappRefundStatusId.code === \"00007\" || item.dappRefundStatusId.code === \"00008\")[0]) {\r\n          this.setState({\r\n            btnhide: true\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this.setState({\r\n      selectedRowKeys: selectedRowKeys\r\n    });\r\n  };\r\n  refundsReceiver = () => {\r\n    confirm({\r\n      title: \"Подтверждение\",\r\n      content: \"Вы действительно хотите получить заявки на возврат?\",\r\n      okText: \"Да\",\r\n      cancelText: \"Нет\",\r\n      onOk: () => {\r\n        const { dispatch } = this.props;\r\n        dispatch({\r\n          type: \"universal/receiversRefund\",\r\n          payload: {\r\n            \"id\": \"e6c16d0c-72cb-450d-a813-af5bbd399d91\",\r\n            \"parameters\": [\r\n              {\r\n                \"name\": \"Код статуса\",\r\n                \"value\": \"00010\"\r\n              },\r\n              {\r\n                \"name\": \"Количество\",\r\n                \"value\": 5\r\n              }\r\n            ]\r\n          }\r\n        }).then(() => this.loadMainGridData());\r\n      },\r\n      onCancel: () => {\r\n\r\n      }\r\n    });\r\n  };\r\n  btnIsDisabled = (isRole, args) => {\r\n    return !isRole ? args.filter((eq) => (eq)).length > 0 : true;\r\n  };\r\n  loadRpmuData = (recordId) => {\r\n\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch({\r\n      type: \"universal/rpmuTable\",\r\n      payload: {\r\n        \"start\": 0,\r\n        \"length\": 30,\r\n        \"refundId\": {\r\n          \"id\": recordId\r\n        }\r\n      }\r\n    });\r\n  };\r\n  exportToExcel = () => {\r\n\r\n    let authToken = localStorage.getItem(\"token\");\r\n    let columns = JSON.parse(localStorage.getItem(\"RefundsPageColumns\"));\r\n\r\n    fetch(\"/api/refund/exportToExcel\",\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n          Authorization: \"Bearer \" + authToken\r\n        },\r\n        method: \"post\",\r\n        body: JSON.stringify({\r\n          \"entityClass\": \"Refund\",\r\n          \"fileName\": formatMessage({ id: \"menu.refunds\" }),\r\n          \"src\": {\r\n            \"searched\": true,\r\n            \"data\": this.state.pagingConfig.src.data\r\n          },\r\n          \"columns\": [{\r\n            \"title\": \"Статус заявки на возврат\",\r\n            \"dataIndex\": \"dappRefundStatusId.nameRu\"\r\n          }, {\r\n            \"dataIndex\": \"personSurname\",\r\n            \"title\": \"Фамилия\"\r\n          }, {\r\n            \"dataIndex\": \"personFirstname\",\r\n            \"title\": \"Имя\"\r\n          }, {\r\n            \"dataIndex\": \"personPatronname\",\r\n            \"title\": \"Отчество\"\r\n          }].concat(columns.filter(column => column.isVisible))\r\n        })\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.blob().then(blob => {\r\n            let disposition = response.headers.get(\"content-disposition\");\r\n            return {\r\n              fileName: this.getFileNameByContentDisposition(disposition),\r\n              raw: blob\r\n            };\r\n          });\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          saveAs(data.raw, moment().format(\"DDMMYYYY\") + data.fileName);\r\n        }\r\n      });\r\n\r\n  };\r\n  getFileNameByContentDisposition = (contentDisposition) => {\r\n    let regex = /filename[^;=\\n]*=(UTF-8(['\"]*))?(.*)/;\r\n    let matches = regex.exec(contentDisposition);\r\n    let filename;\r\n    let filenames;\r\n    if (matches != null && matches[3]) {\r\n      filename = matches[3].replace(/['\"]/g, \"\");\r\n      let match = regex.exec(filename);\r\n      if (match != null && match[3]) {\r\n        filenames = match[3].replace(/['\"]/g, \"\").replace(\"utf-8\", \"\");\r\n      }\r\n    }\r\n    return decodeURI(filenames);\r\n  };\r\n\r\n  importXmlAction = () => {\r\n    this.setState(prevState => ({ ImportXMLModal: { visible: true } }));\r\n  };\r\n\r\n  render() {\r\n    const universal = {\r\n      table: this.props.universal2.references[this.state.pagingConfig.entity] ? this.props.universal2.references[this.state.pagingConfig.entity] : {}\r\n    };\r\n    const dateFormat = \"DD.MM.YYYY\";\r\n    console.log(universal);\r\n    /*const { universal } = this.props;\r\n    console.log(universal);*/\r\n\r\n    const rpmuColumns = this.rpmuColumn();\r\n    const GridFilterData = this.stateFilter();\r\n\r\n    return (\r\n      <Card bodyStyle={{ padding: 5 }}>\r\n          <Row>\r\n            <Col sm={24} md={this.state.searchercont}>\r\n              <div>\r\n                {this.state.searchercont === 8 &&\r\n                  <Card\r\n                    style={{ margin: \"0px 5px 10px 0px\", borderRadius: \"5px\" }}\r\n                    bodyStyle={{ padding: 0 }}\r\n                    type=\"inner\"\r\n                    title={formatMessage({ id: \"menu.mainview.rpmuLocale\" })}\r\n                    extra={<Icon style={{ \"cursor\": \"pointer\" }} onClick={event => this.hideleft()}>s</Icon>}\r\n                  >\r\n                      <Spin spinning={this.props.rpmuLoading}>\r\n                        <SmartGridView\r\n                          name={\"RefundsRPMUColumns\"}\r\n                          rowKey={\"id\"}\r\n                          scroll={{ x: this.state.xsize }}\r\n                          actionColumns={[\r\n                            {\r\n                              title: formatMessage({ id: \"menu.mainview.rpmuName\" }),\r\n                              key: \"lastname\",\r\n                              order: 0,\r\n                              isVisible: true,\r\n                              width: 100,\r\n                              render: (text, record) => (<div>\r\n                                  {text.lastname + \" \" + text.firstname + \" \" + text.secondname}\r\n                                  <br/>\r\n                                  {\"(ИИН: \" + text.iin + \", ДР: \" + text.birthdate + \")\"}\r\n                                </div>\r\n                              )\r\n                            }]}\r\n                          columns={rpmuColumns}\r\n                          sorted={true}\r\n                          sortedInfo={this.state.sortedInfo}\r\n                          onSort={(column) => {\r\n\r\n                            if (Object.keys(column).length === 0) {\r\n                              this.setState(prevState => ({\r\n                                sortedInfo: {},\r\n                                pagingConfig: {\r\n                                  ...prevState.pagingConfig,\r\n                                  sort: []\r\n                                }\r\n                              }), () => {\r\n                                this.loadMainGridData();\r\n                              });\r\n                              return;\r\n                            }\r\n\r\n                            this.setState(prevState => ({\r\n                              sortedInfo: column,\r\n                              pagingConfig: {\r\n                                ...prevState.pagingConfig,\r\n                                sort: [{ field: column.field, \"desc\": column.order === \"descend\" }]\r\n                              }\r\n                            }), () => {\r\n                              this.loadMainGridData();\r\n                            });\r\n\r\n                          }}\r\n                          rowSelection={false}\r\n                          rowClassName={(record) => {\r\n                            if (record.refundExist) {\r\n                              return \"greenRow\";\r\n                            }\r\n                          }\r\n                          }\r\n                          hideFilterBtn={true}\r\n                          hideRefreshBtn={true}\r\n                          dataSource={{\r\n                            total: universal.rpmu.totalElements,\r\n                            pageSize: this.state.rpmu.pagingConfig.length,\r\n                            page: this.state.rpmu.pagingConfig.start + 1,\r\n                            data: universal.rpmu.content\r\n                          }}\r\n                        />\r\n                        {/*<Table*/}\r\n                        {/*bordered={true}*/}\r\n                        {/*size={'small'}*/}\r\n                        {/*columns={rpmuColumns}*/}\r\n                        {/*dataSource={universal.rpmu.content}*/}\r\n                        {/*rowClassName={(record) => {*/}\r\n\r\n                        {/*if (record.refundExist) {*/}\r\n                        {/*console.log(record.refundExist);*/}\r\n                        {/*return 'greenRow';*/}\r\n                        {/*}*/}\r\n                        {/*}*/}\r\n                        {/*}*/}\r\n                        {/*scroll={{ x: 1100 }}/>*/}\r\n                      </Spin>\r\n                  </Card>\r\n                }\r\n\r\n              </div>\r\n            </Col>\r\n            <Col sm={24} md={this.state.tablecont}>\r\n              {/*<Card style={{ borderRadius: '5px', marginBottom: '10px' }} bodyStyle={{ padding: 0 }} bordered={true}>*/}\r\n              <Spin tip={formatMessage({ id: \"system.loading\" })} spinning={this.props.loadingData}>\r\n                <SmartGridView\r\n                  name={\"RefundsPageColumns\"}\r\n                  scroll={{ x: this.state.xsize }}\r\n                  selectedRowCheckBox={true}\r\n                  searchButton={this.state.searchButton}\r\n                  selectedRowKeys={this.state.selectedRowKeys}\r\n                  rowKey={\"id\"}\r\n                  loading={this.props.loadingData}\r\n                  rowSelection={true}\r\n                  actionColumns={this.state.fcolumn}\r\n                  columns={this.state.columns}\r\n                  sorted={true}\r\n                  sortedInfo={this.state.sortedInfo}\r\n                  showTotal={true}\r\n                  showExportBtn={true}\r\n                  dataSource={{\r\n                    total: universal.table.totalElements,\r\n                    pageSize: this.state.pagingConfig.length,\r\n                    page: this.state.pagingConfig.start + 1,\r\n                    data: universal.table.content\r\n                  }}\r\n                  addonButtons={[\r\n                    <Button onClick={() => this.setStatusRecord(1, formatMessage({ id: \"menu.mainview.approveBtn\" }))}\r\n                            disabled={this.btnIsDisabled(hasRole([\"FSMS1\", \"FSMS2\", \"ADMIN\"]), [this.state.btnhide, this.state.selectedRowKeys.length === 0])}\r\n                            key={\"odobrit\"} className={\"btn-success\"}\r\n                    >\r\n                      {formatMessage({ id: \"menu.mainview.approveBtn\" })} {this.state.selectedRowKeys.length > 0 && `(${this.state.selectedRowKeys.length})`}\r\n                    </Button>,\r\n\r\n                    <Button onClick={() => this.setStatusRecord(2, formatMessage({ id: \"menu.mainview.cancelBtn\" }))}\r\n                            disabled={this.btnIsDisabled(hasRole([\"FSMS1\", \"FSMS2\", \"ADMIN\"]), [this.state.btnhide, this.state.selectedRowKeys.length === 0])}\r\n                            key={\"cancel\"}\r\n                            className={\"btn-danger\"}>\r\n                      {formatMessage({ id: \"menu.mainview.cancelBtn\" })} {this.state.selectedRowKeys.length > 0 && `(${this.state.selectedRowKeys.length})`}\r\n                    </Button>,\r\n\r\n                    <Button onClick={() => this.setStatusRecord(3, formatMessage({ id: \"menu.mainview.saveBtn\" }))}\r\n                            disabled={this.btnIsDisabled(hasRole([\"FSMS1\", \"FSMS2\", \"ADMIN\"]), [this.disableBtnIsReceiptDateNull(), this.state.btnhide, this.state.selectedRowKeys.length === 0])}\r\n                            key={\"save\"}>{formatMessage({ id: \"menu.mainview.saveBtn\" })} {this.state.selectedRowKeys.length > 0 && `(${this.state.selectedRowKeys.length})`}</Button>,\r\n                    <Button onClick={() => this.setStatusRecord(4, formatMessage({ id: \"menu.mainview.performBtn\" }))}\r\n                            disabled={this.btnIsDisabled(hasRole([\"FSMS2\", \"ADMIN\"]), [this.disableBtnIsReceiptDateNull(), this.state.btnhide, this.state.selectedRowKeys.length === 0])}\r\n                            key={\"run\"}>{formatMessage({ id: \"menu.mainview.performBtn\" })} {this.state.selectedRowKeys.length > 0 && `(${this.state.selectedRowKeys.length})`}</Button>,\r\n\r\n                    <Dropdown key={\"dropdown\"} trigger={[\"click\"]} overlay={<Menu>\r\n                      <Menu.Item\r\n                        disabled={this.btnIsDisabled(hasRole([\"FSMS2\", \"ADMIN\"]), [this.state.btnhide, this.state.selectedRowKeys.length === 0])}\r\n                        key=\"1\"\r\n                        onClick={this.AppRefundStatusAuto}>\r\n                        {formatMessage({ id: \"menu.mainview.verifyRPMUBtn\" })} {this.state.selectedRowKeys.length > 0 && `(${this.state.selectedRowKeys.length})`}\r\n                      </Menu.Item>\r\n                      {/*<Menu.Item*/}\r\n                      {/*key=\"2\" onClick={this.exportToExcel}>*/}\r\n                      {/*{formatMessage({ id: 'menu.mainview.excelBtn' })}*/}\r\n                      {/*</Menu.Item>*/}\r\n                      <Menu.Item\r\n                        disabled={this.btnIsDisabled(hasRole([\"FSMS2\", \"ADMIN\"]), [this.state.selectedRowKeys.length === 0])}\r\n                        key=\"3\"\r\n                        onClick={() => {\r\n                          this.setState({ ModalChangeDateRefund: true });\r\n                        }}>\r\n                        {formatMessage({ id: \"menu.mainview.setDateBtn\" })}\r\n                      </Menu.Item>\r\n                      <Menu.Item disabled={hasRole([\"ADMIN\", \"FSMS2\"])} key=\"4\" onClick={() => {\r\n                        this.showModal();\r\n                      }}>\r\n                        {formatMessage({ id: \"menu.mainview.mt102Btn\" })}\r\n                      </Menu.Item>\r\n\r\n                      {/*<Menu.Item disabled={hasRole(['ADMIN'])} key=\"5\" onClick={() => {*/}\r\n                      {/*}}>*/}\r\n\r\n                      {/*<Upload*/}\r\n                      {/*showUploadList={false}*/}\r\n                      {/*openFileDialogOnClick={true}*/}\r\n                      {/*onRemove={() => {*/}\r\n\r\n                      {/*}}*/}\r\n                      {/*onPreview={() => {*/}\r\n\r\n                      {/*}}*/}\r\n                      {/*onChange={(e) => {*/}\r\n                      {/*if (e.file.status === 'done') {*/}\r\n                      {/*console.log(e.file);*/}\r\n                      {/*this.importXmlAction();*/}\r\n                      {/*}*/}\r\n                      {/*}}>*/}\r\n                      {/*{formatMessage({ id: 'menu.mainview.xmlBtn' })}*/}\r\n                      {/*</Upload>*/}\r\n                      {/*</Menu.Item>*/}\r\n                      <Menu.Item disabled={hasRole([\"ADMIN\"])} key=\"6\" onClick={() => {\r\n                        this.showGraphic();\r\n                      }}>\r\n                        {formatMessage({ id: \"menu.mainview.infographBtn\" })}\r\n                      </Menu.Item>\r\n                      <Menu.Item disabled={hasRole([\"FSMS1\", \"FSMS2\", \"ADMIN\"])} key=\"7\" onClick={() => {\r\n                        this.refundsReceiver();\r\n                      }}>\r\n                        {formatMessage({ id: \"menu.mainview.refundreceiver\" })}\r\n                      </Menu.Item>\r\n                    </Menu>}>\r\n                      <Button disabled={hasRole([\"FSMS2\", \"ADMIN\"])}\r\n                              key={\"action\"}>{formatMessage({ id: \"menu.mainview.actionBtn\" })} <Icon\r\n                        type=\"down\"/></Button>\r\n                    </Dropdown>\r\n                  ]}\r\n                  actionExport={() => this.exportToExcel()}\r\n                  onShowSizeChange={(pageNumber, pageSize) => {\r\n                    this.onShowSizeChange(pageNumber, pageSize);\r\n                  }}\r\n                  onSort={(column) => {\r\n\r\n                    if (Object.keys(column).length === 0) {\r\n                      this.setState(prevState => ({\r\n                        sortedInfo: {},\r\n                        pagingConfig: {\r\n                          ...prevState.pagingConfig,\r\n                          sort: []\r\n                        }\r\n                      }), () => {\r\n                        this.loadMainGridData();\r\n                      });\r\n                      return;\r\n                    }\r\n\r\n                    this.setState(prevState => ({\r\n                      sortedInfo: column,\r\n                      pagingConfig: {\r\n                        ...prevState.pagingConfig,\r\n                        sort: [{ field: column.field, \"desc\": column.order === \"descend\" }]\r\n                      }\r\n                    }), () => {\r\n                      this.loadMainGridData();\r\n                    });\r\n\r\n                  }}\r\n                  onSelectCell={(cellIndex, cell) => {\r\n\r\n                  }}\r\n                  onSelectRow={(record) => {\r\n                    //console.log(record);\r\n                  }}\r\n                  onFilter={(filters) => {\r\n\r\n                  }}\r\n                  onRefresh={() => {\r\n                    this.loadMainGridData();\r\n                  }}\r\n                  onSearch={() => {\r\n                    this.toggleSearcher();\r\n                  }}\r\n                  onSelectCheckboxChange={(selectedRowKeys) => {\r\n                    this.checkStatus(selectedRowKeys);\r\n                  }}\r\n                />\r\n                <br/>\r\n              </Spin>\r\n              {/*</Card>*/}\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(({ universal, universal2, references, loading }) => ({\r\n  universal,\r\n  universal2,\r\n  references,\r\n  loadingData: loading.effects[\"universal2/getList\"],\r\n  rpmuLoading: loading.effects[\"universal/rpmuTable\"]\r\n}))(MainView);\r\n"],"file":"MainView.js"}